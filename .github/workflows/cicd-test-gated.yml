name: CI/CD with Test Gates

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write
  deployments: write
  issues: write

jobs:
  # 1) Build (Matrix: Node 18 & 20)
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies (lockfile-safe)
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --no-audit || npm install
          else
            npm install
          fi

      - name: Build
        run: |
          echo "Building on Node ${{ matrix.node-version }}..."
          npm run build --if-present || echo "No build script; skipping"

      - name: Archive build
        run: zip -r build.zip . -x ".git/*" "node_modules/*"

      - name: Upload build artifact (per-node)
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.node-version }}
          path: build.zip

  # 2) Unit tests (Matrix)
  test-unit:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install deps
        run: npm install
      - name: Run unit tests (gate)
        run: npm run test:unit

  # 3) Integration tests (Matrix)
  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install deps
        run: npm install
      - name: Run integration tests (gate)
        run: npm run test:integration

  # 4) Coverage (生成 + 上傳 + 輸出覆蓋率；對異常有保底)
  coverage:
    runs-on: ubuntu-latest
    needs: test-integration
    outputs:
      pct: ${{ steps.extract.outputs.pct }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci || npm install

      - name: Generate coverage (do not fail pipeline)
        run: |
          npm run coverage || echo "⚠️ Some tests failed; continuing to collect coverage..."
          # 保底：如果沒有產生 json-summary，就寫入 0% 以避免後續讀檔失敗
          if [ ! -f coverage/coverage-summary.json ]; then
            mkdir -p coverage
            cat > coverage/coverage-summary.json <<'JSON'
            {
              "total": {
                "lines": {"pct": 0},
                "statements": {"pct": 0},
                "branches": {"pct": 0},
                "functions": {"pct": 0}
              }
            }
JSON
          fi

      - name: Extract coverage %
        id: extract
        shell: bash
        run: |
          PCT=$(node -e "console.log(require('./coverage/coverage-summary.json').total.lines.pct ?? 0)")
          echo "Coverage lines: ${PCT}%"
          echo "pct=${PCT}" >> "$GITHUB_OUTPUT"

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  # 5) Deploy to Staging (only if coverage >= 60)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: coverage
    if: ${{ success() && needs.coverage.outputs.pct >= 60 }}
    environment: staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-18
      - name: Release to Staging
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: staging-1.0.0+build-${{ github.run_number }}
        run: |
          gh release create "$TAG" build.zip \
            --notes "Staging release (tests & coverage passed)" \
            --repo "$GH_REPO"

  # 6) Deploy to Production (需環境保護審核)
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: ${{ success() }}
    environment: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-18
      - name: Release to Production
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: prod-1.0.0+build-${{ github.run_number }}
        run: |
          gh release create "$TAG" build.zip \
            --notes "Production release (approved)" \
            --repo "$GH_REPO"

  # 7) Notify on failure（測試失敗自動開 Issue）
  notify-on-fail:
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    steps:
      - name: Create issue on test failure
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create \
            --repo "${{ github.repository }}" \
            --title "❌ CI tests failed in run #${{ github.run_number }}" \
            --body "One or more tests failed. Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
