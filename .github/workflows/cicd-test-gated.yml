name: CI/CD with Test Gates

on:
  workflow_dispatch: {}

permissions:
  contents: write
  deployments: write

env:
  TEST_ENV: staging   # 預設測試環境參數，後面 job 會覆寫

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      - name: Install deps (lockfile-safe)
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --no-audit || npm install
          else
            npm install
          fi
      - name: Build
        run: npm run build --if-present
      - name: Upload dist
        run: zip -r dist.zip . -x ".git/*" "node_modules/*"
      - uses: actions/upload-artifact@v4
        with: { name: dist-artifact, path: dist.zip }

  test-unit:
    runs-on: ubuntu-latest
    needs: build
    env: { TEST_ENV: staging }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      - run: npm install
      - name: Unit tests (gate)
        run: npm run test:unit

  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    env: { TEST_ENV: staging }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      - run: npm install
      - name: Integration tests (gate)
        run: npm run test:integration

  deploy-staging:
    runs-on: ubuntu-latest
    needs: coverage
    environment: staging
    steps:
      - uses: actions/download-artifact@v4
        with: { name: dist-artifact }
      - name: Release to Staging
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: staging-${{ github.run_number }}
        run: gh release create "$TAG" dist.zip --notes "Staging release (tests passed)" --repo "$GH_REPO"

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production   # ← 需在 Environments 設 Required reviewers
    steps:
      - uses: actions/download-artifact@v4
        with: { name: dist-artifact }
      - name: Release to Production
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: prod-${{ github.run_number }}
        run: gh release create "$TAG" dist.zip --notes "Production release (approved)" --repo "$GH_REPO"
 
  coverage:
    runs-on: ubuntu-latest
    needs: [test-integration]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      - run: npm install
      - name: Run coverage
        run: npm run coverage
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage/
            coverage/lcov.info
