name: CI/CD with Test Gates

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_prod:
        description: "也部署到 production？(true/false)"
        required: false
        default: "false"

permissions:
  contents: write
  deployments: write
  issues: write
  actions: read
  checks: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # 1) Build（矩陣：Node 18/20）
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies (lockfile-safe)
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --no-audit || npm install
          else
            npm install
          fi
      - name: Build
        run: |
          echo "Building on Node ${{ matrix.node-version }}..."
          npm run build
      - name: Archive build
        run: zip -r build.zip . -x ".git/*" "node_modules/*"
      - name: Upload build artifact (per-node)
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.node-version }}
          path: build.zip

  # 2) Unit tests（矩陣）
  test-unit:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci || npm install
      - name: Run unit tests (gate)
        run: npm run test:unit

  # 3) Integration tests（矩陣）
  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci || npm install
      - name: Run integration tests (gate)
        run: npm run test:integration

  # 4) Coverage（輸出 pct 與 coverage_ok）
  coverage:
    runs-on: ubuntu-latest
    needs: test-integration
    outputs:
      pct: ${{ steps.extract.outputs.pct }}
      coverage_ok: ${{ steps.gate.outputs.coverage_ok }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - run: npm ci || npm install

      - name: Generate coverage (json-summary + text-summary)
        run: |
          npm run coverage || true
          npx c8 report --reporter=json-summary --reporter=text-summary || true
          # 保底：若沒有 summary，寫入 0%
          node -e "const fs=require('fs');fs.mkdirSync('coverage',{recursive:true});const p='coverage/coverage-summary.json';if(!fs.existsSync(p)){fs.writeFileSync(p,JSON.stringify({total:{lines:{pct:0}}}))}"

      - name: Extract coverage %
        id: extract
        shell: bash
        run: |
          PCT=$(node -e "try{console.log(require('./coverage/coverage-summary.json').total.lines.pct||0)}catch(e){console.log(0)}")
          echo "Coverage lines: ${PCT}%"
          echo "pct=${PCT}" >> "$GITHUB_OUTPUT"

      - name: Gate (>=60)
        id: gate
        shell: bash
        run: |
          PCT="${{ steps.extract.outputs.pct }}"
          ok=false
          awk -v p="$PCT" 'BEGIN{exit (p+0)>=60 ? 0:1}'
          if [ $? -eq 0 ]; then ok=true; fi
          echo "coverage_ok=$ok" >> "$GITHUB_OUTPUT"

      - name: Report PCT to summary
        run: echo "Coverage lines = ${{ steps.extract.outputs.pct }}%" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  # 5) Deploy to Staging（只在 main；用 coverage_ok 判斷）
  deploy-staging:
    runs-on: ubuntu-latest
    needs: coverage
    if: ${{ github.ref_name == 'main' && needs.coverage.outputs.coverage_ok == 'true' }}
    environment: staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-18
      - name: Release to Staging
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: staging-1.0.0+build-${{ github.run_number }}
        run: |
          echo "Deploying with coverage=${{ needs.coverage.outputs.pct }}%"
          gh release create "$TAG" build.zip \
            --notes "Staging release (tests ok, coverage=${{ needs.coverage.outputs.pct }}%)" \
            --repo "$GH_REPO"

  # 6) Deploy to Production（需手動觸發 + 環境審核）
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_prod == 'true' && success() }}
    environment: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-18
      - name: Release to Production
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: prod-1.0.0+build-${{ github.run_number }}
        run: |
          gh release create "$TAG" build.zip \
            --notes "Production release (approved). Coverage=${{ needs.coverage.outputs.pct }}%" \
            --repo "$GH_REPO"

  # 7) 失敗通知（涵蓋前面主要 jobs）
  notify-on-fail:
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    needs: [build, test-unit, test-integration, coverage]
    steps:
      - name: Create issue on CI failure
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create \
            --repo "${{ github.repository }}" \
            --title "❌ CI failed in run #${{ github.run_number }}" \
            --body "請查看 Actions 日誌與 coverage 結果：${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
