name: CI/CD with Test Gates

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  # 🧱 1. Build Job
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies (lockfile-safe)
        run: npm ci || npm install

      - name: Build
        run: |
          echo "Building on Node ${{ matrix.node-version }}..."
          npm run build || echo "No build script; skipping"

      - name: Archive build
        run: zip -r build.zip .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.node-version }}
          path: build.zip

  # 🧪 2. Unit Test
  test-unit:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.node-version }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm install
      - name: Run unit tests
        run: npm run test:unit

  # 🔧 3. Integration Test
  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - name: Run integration tests
        run: npm run test:integration

  # 📊 4. Coverage report (生成 + 上傳)
  coverage:
    runs-on: ubuntu-latest
    needs: test-integration
    outputs:
      pct: ${{ steps.extract.outputs.pct }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm install
      - name: Generate coverage
        run: npm run coverage
      - name: Extract coverage %
        id: extract
        run: |
          mkdir -p coverage
          npx c8 --reporter=json-summary node --test tests
          pct=$(jq -r '.total.lines.pct // 0' coverage/coverage-summary.json)
          echo "Coverage: $pct%"
          echo "pct=$pct" >> $GITHUB_OUTPUT
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  # 🚀 5. Deploy to Staging (若覆蓋率 ≥ 60%)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: coverage
    if: ${{ success() && needs.coverage.outputs.pct >= 60 }}
    environment: staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-18
      - name: Deploy Staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="staging-1.0.0+build-${{ github.run_number }}"
          gh release create "$TAG" build.zip --notes "Automated staging release ✅"

  # 🚀 6. Deploy to Production (需人工審核)
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: ${{ success() }}
    environment: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-18
      - name: Deploy Production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="prod-1.0.0+build-${{ github.run_number }}"
          gh release create "$TAG" build.zip --notes "Production release 🚀"

  # 🚨 7. Notify (on test fail)
  notify-on-fail:
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    steps:
      - name: Auto-create GitHub Issue for failed tests
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create \
            --title "❌ CI Tests Failed in Run #${{ github.run_number }}" \
            --body "One or more tests failed. See full logs here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
