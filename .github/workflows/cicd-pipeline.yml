name: CI/CD Deployment Pipeline (O-grade)

on:
  workflow_dispatch: {}

permissions:
  contents: write
  deployments: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20]   # çŸ©é™£æ¸¬è©¦
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with: { node-version: ${{ matrix['node-version'] }} }

      # lockfile-safeï¼šæœ‰ lock ç”¨ ciï¼›æ²’æœ‰å°± install
      - name: Install deps (ci with fallback)
        run: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci --no-audit || npm install
            else
              npm install
            fi
          else
            echo "No package.json, skip"
          fi

      - name: Lint
        run: npm run lint --if-present

      - name: Test
        run: npm test --if-present

      - name: Build
        run: |
          if [ -f package.json ]; then
            npm run build --if-present || npm run compile --if-present || echo "no build script"
          fi

      - name: Archive
        run: zip -r build-${{ matrix['node-version'] }}.zip . -x ".git/*" "node_modules/*"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build-*.zip

  versioning:
    needs: build_and_test
    runs-on: ubuntu-latest
    outputs:
      TAG_STAGING: ${{ steps.mk.outputs.staging }}
      TAG_PROD: ${{ steps.mk.outputs.prod }}
    steps:
      - uses: actions/checkout@v4
      - id: mk
        run: |
          if [ -f package.json ]; then
            base=$(node -p "require('./package.json').version || '0.1.0'")
          else
            base="0.1.0"
          fi
          runno="${GITHUB_RUN_NUMBER}"
          echo "staging=staging-${base}+build-${runno}" >> "$GITHUB_OUTPUT"
          echo "prod=prod-${base}+build-${runno}" >> "$GITHUB_OUTPUT"

  deploy-staging:
    needs: [versioning]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/download-artifact@v4
        with: { name: build-artifacts }

      - name: Release to Staging (idempotent)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: ${{ needs.versioning.outputs.TAG_STAGING }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          gh release view "$TAG" --repo "$GH_REPO" >/dev/null 2>&1 \
            && gh release delete "$TAG" --cleanup-tag --yes --repo "$GH_REPO" \
            || echo "No existing release for $TAG"
          gh release create "$TAG" build-*.zip --notes "${NOTE:-'Testing pre-production release'}" --repo "$GH_REPO"

      - name: Notify Slack (staging)
        if: ${{ success() && secrets.SLACK_WEBHOOK_URL != '' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"ðŸŸ¡ Staging released: ${{ needs.versioning.outputs.TAG_STAGING }}\"}" \
            "${{ secrets.SLACK_WEBHOOK_URL }}"

  deploy-production:
    needs: [deploy-staging, versioning]
    runs-on: ubuntu-latest
    environment: production   # é€™è£¡æœƒç­‰å¾… Reviewer æ‰¹å‡†
    steps:
      - uses: actions/download-artifact@v4
        with: { name: build-artifacts }

      - name: Release to Production (awaits approval)
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: ${{ needs.versioning.outputs.TAG_PROD }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          gh release view "$TAG" --repo "$GH_REPO" >/dev/null 2>&1 \
            && gh release delete "$TAG" --cleanup-tag --yes --repo "$GH_REPO" \
            || echo "No existing release for $TAG"
          gh release create "$TAG" build-*.zip --notes "${NOTE:-'Production release'}" --repo "$GH_REPO"

      - name: Notify Slack (prod)
        if: ${{ success() && secrets.SLACK_WEBHOOK_URL != '' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"âœ… Production released: ${{ needs.versioning.outputs.TAG_PROD }}\"}" \
            "${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: Rollback if failed (cleanup half-done releases)
        if: ${{ failure() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG_P: ${{ needs.versioning.outputs.TAG_PROD }}
        run: |
          gh release delete "$TAG_P" --cleanup-tag --yes --repo "$GH_REPO" || true
