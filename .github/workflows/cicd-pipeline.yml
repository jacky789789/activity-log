name: CI/CD Deployment Pipeline (O-grade)

on:
  workflow_dispatch: {}

permissions:
  contents: write
  deployments: write

jobs:
  build_and_test:
    name: Build & Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # 若 lint script 使用 bunx，才安裝 Bun
      - name: Install bun if lint uses bunx
        shell: bash
        run: |
          if [ -f package.json ] && grep -q '"lint".*bunx' package.json; then
            echo "bunx detected -> install Bun"
            curl -fsSL https://bun.sh/install | bash
            echo "$HOME/.bun/bin" >> "$GITHUB_PATH"
          else
            echo "no bunx -> skip Bun install"
          fi

      # 有 lockfile 用 ci；失敗或無 lock 改 install
      - name: Install dependencies (lockfile-safe)
        shell: bash
        run: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci --no-audit || npm install
            else
              npm install
            fi
          else
            echo "No package.json -> skip install"
          fi

      # 顯示 scripts 方便除錯
      - name: Show npm scripts (debug)
        shell: bash
        run: |
          if [ -f package.json ]; then
            echo "package.json scripts:"
            cat package.json | jq -r '.scripts // {}'
          fi

      # Lint 與 Test 以 soft-fail 方式執行（不中斷矩陣）
      - name: Run Lint (soft-fail)
        shell: bash
        run: |
          if [ -f package.json ] && jq -e '.scripts.lint' package.json >/dev/null; then
            echo "Running: npm run lint"
            npm run lint || { echo "::warning ::Lint failed but will not block the pipeline"; }
          else
            echo "No lint script, skipping"
          fi

      - name: Run Tests (soft-fail)
        shell: bash
        run: |
          if [ -f package.json ] && jq -e '.scripts.test' package.json >/dev/null; then
            echo "Running: npm test"
            npm test || { echo "::warning ::Tests failed but will not block the pipeline"; }
          else
            echo "No test script, skipping"
          fi

      - name: Build (safe)
        shell: bash
        run: |
          if [ -f package.json ]; then
            npm run build --if-present || npm run compile --if-present || echo "no build script"
          else
            echo "No package.json -> skip build"
          fi

      # 每個 Node 版本輸出不同檔名避免覆蓋
      - name: Archive artifact
        run: zip -r build-${{ matrix.node-version }}.zip . -x ".git/*" "node_modules/*"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.node-version }}
          path: build-${{ matrix.node-version }}.zip

  # 動態版本標籤（讀 package.json 版本 + run number）
  versioning:
    name: Generate Dynamic Tags
    needs: build_and_test
    runs-on: ubuntu-latest
    outputs:
      TAG_STAGING: ${{ steps.mk.outputs.staging }}
      TAG_PROD: ${{ steps.mk.outputs.prod }}
      BASE_VERSION: ${{ steps.mk.outputs.base }}
    steps:
      - uses: actions/checkout@v4
      - id: mk
        shell: bash
        run: |
          if [ -f package.json ]; then
            base=$(node -p "require('./package.json').version || '0.1.0'")
          else
            base="0.1.0"
          fi
          runno="${GITHUB_RUN_NUMBER}"
          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "staging=staging-${base}+build-${runno}" >> "$GITHUB_OUTPUT"
          echo "prod=prod-${base}+build-${runno}" >> "$GITHUB_OUTPUT"
          echo "Generated staging tag: staging-${base}+build-${runno}"
          echo "Generated prod tag: prod-${base}+build-${runno}"

  deploy-staging:
    name: Deploy to Staging
    needs: versioning
    runs-on: ubuntu-latest
    environment: staging
    steps:
      # 同時把兩個矩陣產物下載到當前目錄
      - uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      - name: Release to Staging (dynamic tag)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # gh 使用 GH_TOKEN
          GH_REPO: ${{ github.repository }}
          TAG: ${{ needs.versioning.outputs.TAG_STAGING }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          gh release view "$TAG" --repo "$GH_REPO" >/dev/null 2>&1 \
            && gh release delete "$TAG" --cleanup-tag --yes --repo "$GH_REPO" \
            || echo "No existing release for $TAG"
          gh release create "$TAG" build-*.zip --notes "${NOTE:-'Testing pre-production release'}" --repo "$GH_REPO"

      # 若沒設 secret，條件判斷會跳過
      - name: Notify Slack (staging)
        if: ${{ success() && env.SLACK_WEBHOOK_URL != '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -sS -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"🟡 Staging released: ${{ needs.versioning.outputs.TAG_STAGING }}\"}" \
            "$SLACK_WEBHOOK_URL" || true

  deploy-production:
    name: Deploy to Production (requires approval)
    needs: [deploy-staging, versioning]
    runs-on: ubuntu-latest
    environment: production   # 會觸發 reviewer 審核
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      - name: Release to Production (dynamic tag)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: ${{ needs.versioning.outputs.TAG_PROD }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          gh release view "$TAG" --repo "$GH_REPO" >/dev/null 2>&1 \
            && gh release delete "$TAG" --cleanup-tag --yes --repo "$GH_REPO" \
            || echo "No existing release for $TAG"
          gh release create "$TAG" build-*.zip --notes "${NOTE:-'Production release'}" --repo "$GH_REPO"

      - name: Notify Slack (prod)
        if: ${{ success() && env.SLACK_WEBHOOK_URL != '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -sS -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"✅ Production released: ${{ needs.versioning.outputs.TAG_PROD }}\"}" \
            "$SLACK_WEBHOOK_URL" || true

      # 失敗時自動清掉半成品 release/tag
      - name: Rollback if failed (cleanup half-done releases)
        if: ${{ failure() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG_P: ${{ needs.versioning.outputs.TAG_PROD }}
        run: |
          gh release delete "$TAG_P" --cleanup-tag --yes --repo "$GH_REPO" || true
