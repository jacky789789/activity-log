name: CI/CD Deployment Pipeline

on:
  workflow_dispatch: {}

permissions:
  contents: write
  deployments: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      # 跟 dev 一樣的「lockfile-safe」安裝策略（簡化版）
      - name: Install deps (ci with fallback)
        run: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci --no-audit || npm install
            else
              npm install
            fi
          else
            echo "No package.json, skip"
          fi

      - name: Build
        run: |
          if [ -f package.json ]; then
            npm run build --if-present || npm run compile --if-present || echo "no build script"
          fi

      - name: Archive
        run: zip -r build.zip . -x ".git/*" "node_modules/*"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with: { name: build-artifact, path: build.zip }

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/download-artifact@v4
        with: { name: build-artifact }

      - name: Release to Staging (idempotent, repo-scoped)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: ${{ vars.BUILD_TAG }}         # staging-v1.0
          NOTE: ${{ vars.RELEASE_NOTE }}     # Testing pre-production release
        run: |
          gh release view "$TAG" --repo "$GH_REPO" >/dev/null 2>&1 \
            && gh release delete "$TAG" --cleanup-tag --yes --repo "$GH_REPO" \
            || echo "No existing release for $TAG"
          gh release create "$TAG" build.zip --notes "${NOTE:-'Staging release'}" --repo "$GH_REPO"

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production   # 這裡會觸發 reviewers 審核
    steps:
      - uses: actions/download-artifact@v4
        with: { name: build-artifact }

      - name: Release to Production (awaits approval)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: ${{ vars.BUILD_TAG }}         # prod-v1.0
          NOTE: ${{ vars.RELEASE_NOTE }}     # Production release
        run: |
          gh release view "$TAG" --repo "$GH_REPO" >/dev/null 2>&1 \
            && gh release delete "$TAG" --cleanup-tag --yes --repo "$GH_REPO" \
            || echo "No existing release for $TAG"
          gh release create "$TAG" build.zip --notes "${NOTE:-'Production release'}" --repo "$GH_REPO"
