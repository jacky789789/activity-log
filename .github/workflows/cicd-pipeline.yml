name: CI/CD Deployment Pipeline (O-grade)

on:
  workflow_dispatch: {}

permissions:
  contents: write
  deployments: write

jobs:
  build_and_test:
    name: Build & Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false              # ✅ 不要因單一失敗而取消其他矩陣任務
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # ✅ 只要 package.json 的 lint 有 bunx，就安裝 Bun
      - name: Install bun if lint uses bunx
        shell: bash
        run: |
          if [ -f package.json ] && grep -q '"lint".*bunx' package.json; then
            echo "bunx detected in lint script -> install Bun"
            curl -fsSL https://bun.sh/install | bash
            echo "$HOME/.bun/bin" >> "$GITHUB_PATH"
          else
            echo "No bunx in lint script -> skip Bun install"
          fi

      # ✅ 有 lockfile 用 ci，沒有就 install；ci 失敗自動 fallback
      - name: Install dependencies (lockfile-safe)
        shell: bash
        run: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci --no-audit || npm install
            else
              npm install
            fi
          else
            echo "No package.json -> skip install"
          fi

      - name: Run Lint
        run: npm run lint --if-present

      - name: Run Tests
        run: npm test --if-present

      - name: Build
        run: |
          if [ -f package.json ]; then
            npm run build --if-present || npm run compile --if-present || echo "no build script"
          fi

      # ✅ 產物加上 node 版本避免覆蓋
      - name: Archive artifact
        run: zip -r build-${{ matrix.node-version }}.zip . -x ".git/*" "node_modules/*"

      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.node-version }}
          path: build-${{ matrix.node-version }}.zip

  # ✅ 動態版本標籤
  versioning:
    needs: build_and_test
    runs-on: ubuntu-latest
    outputs:
      TAG_STAGING: ${{ steps.mk.outputs.staging }}
      TAG_PROD: ${{ steps.mk.outputs.prod }}
    steps:
      - uses: actions/checkout@v4
      - id: mk
        shell: bash
        run: |
          if [ -f package.json ]; then
            base=$(node -p "require('./package.json').version || '0.1.0'")
          else
            base="0.1.0"
          fi
          runno="${GITHUB_RUN_NUMBER}"
          echo "staging=staging-${base}+build-${runno}" >> "$GITHUB_OUTPUT"
          echo "prod=prod-${base}+build-${runno}" >> "$GITHUB_OUTPUT"
          echo "Generated staging tag: staging-${base}+build-${runno}"
          echo "Generated prod tag: prod-${base}+build-${runno}"

  deploy-staging:
    needs: versioning
    runs-on: ubuntu-latest
    environment: staging
    steps:
      # ✅ 一次抓回兩個矩陣產物並合併到工作目錄
      - uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      - name: Release to Staging (dynamic tag)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: ${{ needs.versioning.outputs.TAG_STAGING }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          gh release view "$TAG" --repo "$GH_REPO" >/dev/null 2>&1 \
            && gh release delete "$TAG" --cleanup-tag --yes --repo "$GH_REPO" \
            || echo "No existing release for $TAG"
          gh release create "$TAG" build-*.zip --notes "${NOTE:-'Testing pre-production release'}" --repo "$GH_REPO"

  deploy-production:
    needs: [deploy-staging, versioning]
    runs-on: ubuntu-latest
    environment: production   # 會等 Reviewer 批准
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: build-artifact-*
          merge-multiple: true

      - name: Release to Production (dynamic tag)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TAG: ${{ needs.versioning.outputs.TAG_PROD }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          gh release view "$TAG" --repo "$GH_REPO" >/dev/null 2>&1 \
            && gh release delete "$TAG" --cleanup-tag --yes --repo "$GH_REPO" \
            || echo "No existing release for $TAG"
          gh release create "$TAG" build-*.zip --notes "${NOTE:-'Production release'}" --repo "$GH_REPO"
