name: CI Staging Deployment

on:
  push:
    branches: [ main, master ]  # 支援 main / master

permissions:
  contents: write

concurrency:
  group: staging-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🧰 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 🏗️ Install & Build (Bun-first with fallbacks)
        run: |
          bun install
          npm run build || bun run build || bunx @vercel/ncc build src/index.js --license licenses.txt
          zip -r build.zip .

      - name: 📤 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: 📥 Checkout repository (for gh CLI to work)
        uses: actions/checkout@v4

      - name: 📥 Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: 🚿 Cleanup existing release & tag (idempotent)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.BUILD_TAG }}     # 從 staging 環境讀取
        run: |
          # 若 release 存在才刪
          if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            gh release delete "$TAG" -y --repo "$GITHUB_REPOSITORY"
          fi

          # 若 tag 存在才刪
          if gh api -H "Accept: application/vnd.github+json" \
              "repos/$GITHUB_REPOSITORY/git/refs/tags/$TAG" >/dev/null 2>&1; then
            gh api -X DELETE "repos/$GITHUB_REPOSITORY/git/refs/tags/$TAG"
          fi

      - name: 🚀 Create Staging Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.BUILD_TAG }}         # e.g. staging-v1.0
          NOTE: ${{ vars.RELEASE_NOTE }}     # e.g. Staging build for pre-production
        run: |
          gh release create "$TAG" build.zip --notes "$NOTE" --repo "$GITHUB_REPOSITORY"
