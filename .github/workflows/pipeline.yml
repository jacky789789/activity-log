name: CI/CD Deployment Pipeline


on:
  workflow_dispatch:
  push:
    branches: [main, master]

permissions:
  contents: write
  deployments: write

concurrency:
  group: pipeline-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: npm install

      - name: Install & Build (Bun-first with fallbacks)
        run: |
          bun install
          npm run build || bun run build || bunx @vercel/ncc build src/index.js --license licenses.txt
          zip -r build.zip .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-dev:
    needs:
      - build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Dev
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          TAG_WITH_ENV="${TAG}-dev"
          NOTE_WITH_ENV="${NOTE}"$'\n'"Environment: dev"
          if gh release view "$TAG_WITH_ENV" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            gh release upload "$TAG_WITH_ENV" build.zip --clobber --repo "$GITHUB_REPOSITORY"
            gh release edit "$TAG_WITH_ENV" --notes "$NOTE_WITH_ENV" --repo "$GITHUB_REPOSITORY"
          else
            gh release create "$TAG_WITH_ENV" build.zip --notes "$NOTE_WITH_ENV" --repo "$GITHUB_REPOSITORY"
          fi
  
  deploy-staging:
    needs:
      - deploy-dev
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Staging
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          TAG_WITH_ENV="${TAG}-staging"
          NOTE_WITH_ENV="${NOTE}"$'\n'"Environment: staging"
          if gh release view "$TAG_WITH_ENV" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            gh release upload "$TAG_WITH_ENV" build.zip --clobber --repo "$GITHUB_REPOSITORY"
            gh release edit "$TAG_WITH_ENV" --notes "$NOTE_WITH_ENV" --repo "$GITHUB_REPOSITORY"
          else
            gh release create "$TAG_WITH_ENV" build.zip --notes "$NOTE_WITH_ENV" --repo "$GITHUB_REPOSITORY"
          fi

  deploy-production:
    needs:
      - deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Production
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          TAG_WITH_ENV="${TAG}"
          NOTE_WITH_ENV="${NOTE}"$'\n'"Environment: production"
          if gh release view "$TAG_WITH_ENV" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            gh release upload "$TAG_WITH_ENV" build.zip --clobber --repo "$GITHUB_REPOSITORY"
            gh release edit "$TAG_WITH_ENV" --notes "$NOTE_WITH_ENV" --repo "$GITHUB_REPOSITORY"
          else
            gh release create "$TAG_WITH_ENV" build.zip --notes "$NOTE_WITH_ENV" --repo "$GITHUB_REPOSITORY"
          fi
