name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:
  push:
    branches: [main, master]

permissions:
  contents: write
  deployments: write

concurrency:
  group: pipeline-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
@@ -38,83 +37,119 @@ jobs:
      - name: Install & Build (Bun-first with fallbacks)
        run: |
          bun install
          npm run build || bun run build || bunx @vercel/ncc build src/index.js --license licenses.txt
          zip -r build.zip .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-dev:
    needs:
      - build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_TAG: ${{ vars.BUILD_TAG }}
          RELEASE_NOTE: ${{ vars.RELEASE_NOTE }}
          RELEASE_SUFFIX: "-dev"
          ENV_LABEL: dev
        run: |
          set -euo pipefail

          TAG="${BASE_TAG}${RELEASE_SUFFIX}"
          NOTE="${RELEASE_NOTE}"$'\n'"Environment: ${ENV_LABEL}"

          if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            gh release upload "$TAG" build.zip --clobber --repo "$GITHUB_REPOSITORY"
            gh release edit "$TAG" --notes "$NOTE" --repo "$GITHUB_REPOSITORY"
            exit 0
          fi

          if gh api --method GET "repos/$GITHUB_REPOSITORY/git/refs/tags/$TAG" >/dev/null 2>&1; then
            gh api --method DELETE "repos/$GITHUB_REPOSITORY/git/refs/tags/$TAG"
          fi

          gh release create "$TAG" build.zip --notes "$NOTE" --repo "$GITHUB_REPOSITORY"
  
  deploy-staging:
    needs:
      - deploy-dev
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_TAG: ${{ vars.BUILD_TAG }}
          RELEASE_NOTE: ${{ vars.RELEASE_NOTE }}
          RELEASE_SUFFIX: "-staging"
          ENV_LABEL: staging
        run: |
          set -euo pipefail

          TAG="${BASE_TAG}${RELEASE_SUFFIX}"
          NOTE="${RELEASE_NOTE}"$'\n'"Environment: ${ENV_LABEL}"

          if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            gh release upload "$TAG" build.zip --clobber --repo "$GITHUB_REPOSITORY"
            gh release edit "$TAG" --notes "$NOTE" --repo "$GITHUB_REPOSITORY"
            exit 0
          fi

          if gh api --method GET "repos/$GITHUB_REPOSITORY/git/refs/tags/$TAG" >/dev/null 2>&1; then
            gh api --method DELETE "repos/$GITHUB_REPOSITORY/git/refs/tags/$TAG"
          fi

          gh release create "$TAG" build.zip --notes "$NOTE" --repo "$GITHUB_REPOSITORY"

  deploy-production:
    needs:
      - deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_TAG: ${{ vars.BUILD_TAG }}
          RELEASE_NOTE: ${{ vars.RELEASE_NOTE }}
          RELEASE_SUFFIX: ""
          ENV_LABEL: production
        run: |
          set -euo pipefail

          TAG="${BASE_TAG}${RELEASE_SUFFIX}"
          NOTE="${RELEASE_NOTE}"$'\n'"Environment: ${ENV_LABEL}"

          if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            gh release upload "$TAG" build.zip --clobber --repo "$GITHUB_REPOSITORY"
            gh release edit "$TAG" --notes "$NOTE" --repo "$GITHUB_REPOSITORY"
            exit 0
          fi

          if gh api --method GET "repos/$GITHUB_REPOSITORY/git/refs/tags/$TAG" >/dev/null 2>&1; then
            gh api --method DELETE "repos/$GITHUB_REPOSITORY/git/refs/tags/$TAG"
          fi

          gh release create "$TAG" build.zip --notes "$NOTE" --repo "$GITHUB_REPOSITORY"
